generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified Boolean   @default(false)
  image         String?
  role          Role      @default(SUPER_ADMIN)
  client        Client?
  sessions      Session[]
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime
  updatedAt DateTime

  @@unique([token])
  @@map("sessions")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("accounts")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verifications")
}

model Client {
  id         String      @id @default(cuid())
  name       String
  slug       String      @unique
  active     Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  userId     String?     @unique
  user       User?       @relation(fields: [userId], references: [id])
  dashboards Dashboard[]

  @@index([userId])
  @@map("clients")
}

model Dashboard {
  id          String           @id @default(cuid())
  clientId    String
  templateId  String
  name        String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  client      Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  template    FormTemplate     @relation(fields: [templateId], references: [id], onDelete: Cascade)
  submissions FormSubmission[]
  syncLogs    SyncLog[]
  SyncJob     SyncJob[]

  @@index([clientId])
  @@index([templateId])
  @@map("dashboards")
}

model FormTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  active      Boolean  @default(true)
  sortOrder   Int
  version     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String

  // Relations
  dashboards        Dashboard[]
  questionGroups    QuestionGroup[]
  questions         Question[]
  subBrandTemplates SubBrandTemplate[]

  @@map("form_templates")
}

model Question {
  id                  String               @id @default(cuid())
  name                String
  type                QuestionType
  sortOrder           Int
  isMandatory         Boolean              @default(false)
  isAutoFill          Boolean              @default(false)
  forImageRecognition Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  formTemplateId      String
  questionGroupId     String?
  answers             Answer[]
  attachments         QuestionAttachment[]
  options             QuestionOption[]
  triggers            QuestionTrigger[]
  formTemplate        FormTemplate         @relation(fields: [formTemplateId], references: [id])
  questionGroup       QuestionGroup?       @relation(fields: [questionGroupId], references: [id])

  @@index([formTemplateId])
  @@index([questionGroupId])
  @@map("questions")
}

model QuestionOption {
  id            String            @id @default(cuid())
  value         String
  sortOrder     Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  questionId    String
  answers       Answer[]
  question      Question          @relation(fields: [questionId], references: [id])
  triggers      QuestionTrigger[]
  answerOptions AnswerOption[]

  @@index([questionId])
  @@map("question_options")
}

model QuestionAttachment {
  id         String   @id @default(cuid())
  url        String
  type       String
  name       String
  questionId String
  question   Question @relation(fields: [questionId], references: [id])

  @@index([questionId])
  @@map("question_attachments")
}

model QuestionGroup {
  id             String            @id @default(cuid())
  name           String
  type           QuestionGroupType @default(BASIC)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  formTemplateId String
  formTemplate   FormTemplate      @relation(fields: [formTemplateId], references: [id])
  triggers       QuestionTrigger[]
  questions      Question[]

  @@index([formTemplateId])
  @@map("question_groups")
}

model QuestionTrigger {
  id         String          @id @default(cuid())
  questionId String
  groupId    String?
  optionId   String?
  group      QuestionGroup?  @relation(fields: [groupId], references: [id])
  option     QuestionOption? @relation(fields: [optionId], references: [id])
  question   Question        @relation(fields: [questionId], references: [id])

  @@index([questionId])
  @@index([groupId])
  @@index([optionId])
  @@map("question_triggers")
}

model ServiceToken {
  id              String    @id @default(cuid())
  service         String    @unique
  token           String
  fingerprint     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  refreshToken    String?   @map("refresh_token")
  serviceClientId String?   @map("service_client_id")
  expiresIn       Int?
  expiresAt       DateTime? @map("expires_at")

  // Relations
  refreshTokenLogs ServiceRefreshTokenLog[]

  @@index([service])
  @@map("service_tokens")
}

model Brand {
  id          String           @id @default(cuid())
  name        String           @unique
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  slug        String           @unique
  products    Product[]
  subBrands   SubBrand[]
  activations ActivatedBrand[]

  @@map("brands")
}

model SubBrand {
  id        String   @id @default(cuid())
  name      String
  brandId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  slug      String   @unique

  // Relations
  products  Product[]
  brand     Brand              @relation(fields: [brandId], references: [id])
  templates SubBrandTemplate[]

  @@unique([slug, brandId])
  @@map("sub_brands")
}

model SubBrandTemplate {
  subBrandId String
  templateId String
  subBrand   SubBrand     @relation(fields: [subBrandId], references: [id])
  template   FormTemplate @relation(fields: [templateId], references: [id])

  @@id([subBrandId, templateId])
  @@map("sub_brands_templates")
}

model Presentation {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  products Product[]

  @@map("presentations")
}

model Flavor {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  slug      String    @unique
  products  Product[]

  @@map("flavors")
}

model Product {
  id             String        @id @default(cuid())
  name           String
  brandId        String
  subBrandId     String?
  presentationId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  flavorId       String?
  imageUrl       String?       @map("image_url")
  brand          Brand         @relation(fields: [brandId], references: [id])
  flavor         Flavor?       @relation(fields: [flavorId], references: [id])
  presentation   Presentation? @relation(fields: [presentationId], references: [id])
  subBrand       SubBrand?     @relation(fields: [subBrandId], references: [id])
  sales          ProductSale[]

  @@unique([name, brandId])
  @@index([brandId])
  @@index([subBrandId])
  @@index([presentationId])
  @@index([flavorId])
  @@map("products")
}

model Representative {
  id              String           @id @default(cuid())
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  formSubmissions FormSubmission[]

  @@map("representatives")
}

model Location {
  id              String           @id @default(cuid())
  code            String
  name            String
  address         String
  postalCode      String           @map("postal_code")
  city            String
  state           String
  country         String
  latitude        Float
  longitude       Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  formSubmissions FormSubmission[]

  @@map("locations")
}

model Dealer {
  id               String          @id @default(cuid())
  name             String
  nameOther        String?         @map("name_other")
  sellerName       String?         @map("seller_name")
  sellerMobile     String?         @map("seller_mobile")
  sellerEmail      String?         @map("seller_email")
  notes            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  formSubmissionId String?         @unique @map("form_submission_id")
  formSubmission   FormSubmission? @relation(fields: [formSubmissionId], references: [id])

  @@index([formSubmissionId])
  @@map("dealers")
}

model PointOfSale {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  formSubmissions FormSubmission[]

  @@map("points_of_sale")
}

model ProductLocation {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  formSubmissions FormSubmission[]

  @@map("product_locations")
}

model FormSubmission {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  dashboardId        String
  email              String?
  locationId         String?
  mobilePhone        String?  @map("mobile_phone")
  notes              String?
  phone              String?
  registered         Boolean  @default(false)
  representativeId   String?
  status             String?
  tags               String[]
  endDate            DateTime @map("end_date")
  legalName          String?  @map("legal_name")
  startDate          DateTime @map("start_date")
  submittedAt        DateTime @map("submitted_at")
  formLink           String   @map("form_link")
  totalQuantity      Int      @default(0) @map("total_quantity")
  totalAmount        Float    @default(0) @map("total_amount")
  samplesDelivered   Int      @default(0) @map("samples_delivered")
  pointOfSaleId      String?  @map("point_of_sale_id")
  productLocationId  String?  @map("product_location_id")
  productInPromotion Boolean  @default(false) @map("product_in_promotion")
  riskZone           Boolean  @default(false) @map("risk_zone")
  firstActivation    Boolean  @default(false) @map("first_activation")

  // Relations
  answers         Answer[]
  dealer          Dealer?
  dashboard       Dashboard        @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  location        Location?        @relation(fields: [locationId], references: [id])
  representative  Representative?  @relation(fields: [representativeId], references: [id])
  productSales    ProductSale[]
  activatedBrands ActivatedBrand[]
  pointOfSale     PointOfSale?     @relation(fields: [pointOfSaleId], references: [id])
  productLocation ProductLocation? @relation(fields: [productLocationId], references: [id])
  sampling        Sampling?
  photos          Photo[]

  @@unique([dashboardId, locationId, representativeId, submittedAt])
  @@index([locationId])
  @@index([representativeId])
  @@index([dashboardId])
  @@map("form_submissions")
}

model ProductSale {
  id           String         @id @default(cuid())
  submissionId String         @map("submission_id")
  productId    String         @map("product_id")
  quantity     Int
  price        Float
  total        Float
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  submission   FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  product      Product        @relation(fields: [productId], references: [id])

  @@index([submissionId])
  @@index([productId])
  @@map("product_sales")
}

model ActivatedBrand {
  id           String         @id @default(cuid())
  submissionId String         @map("submission_id")
  brandId      String         @map("brand_id")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  submission   FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  brand        Brand          @relation(fields: [brandId], references: [id])

  @@unique([submissionId, brandId])
  @@index([submissionId])
  @@index([brandId])
  @@map("activated_brands")
}

model Answer {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  value           String
  optionId        String?         @map("option_id")
  questionId      String          @map("question_id")
  questionKey     String          @map("question_key")
  submissionId    String          @map("submission_id")
  selectedOption  QuestionOption? @relation(fields: [optionId], references: [id])
  question        Question        @relation(fields: [questionId], references: [id])
  submission      FormSubmission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  selectedOptions AnswerOption[]

  @@index([submissionId])
  @@index([questionId])
  @@index([optionId])
  @@index([questionKey])
  @@map("answers")
}

model AnswerOption {
  id        String         @id @default(cuid())
  answerId  String         @map("answer_id")
  optionId  String         @map("option_id")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  answer    Answer         @relation(fields: [answerId], references: [id], onDelete: Cascade)
  option    QuestionOption @relation(fields: [optionId], references: [id])

  @@unique([answerId, optionId])
  @@index([answerId])
  @@index([optionId])
  @@map("answer_options")
}

model SamplingTraffic {
  id          String @id @default(cuid())
  slug        String @unique
  description String

  samplings Sampling[]

  @@map("sampling_traffic")
}

model Ethnicity {
  id          String @id @default(cuid())
  slug        String @unique
  description String

  samplings Sampling[]

  @@map("ethnicity")
}

model AgeRange {
  id          String @id @default(cuid())
  slug        String @unique
  description String

  samplings Sampling[]

  @@map("age_range")
}

model Gender {
  id          String @id @default(cuid())
  slug        String @unique
  description String

  samplings Sampling[]
}

model PurchaseIntention {
  id          String @id @default(cuid())
  slug        String @unique
  description String

  purchaseIntentionsSampling PurchaseIntentionSampling[]
}

model ConsumptionMoment {
  id          String @id @default(cuid())
  slug        String @unique
  description String

  consumptionMomentsSampling ConsumptionMomentSampling[]

  @@map("consumption_moments")
}

model PurchaseIntentionSampling {
  purchaseIntentionId String
  samplingId          String

  purchaseIntention PurchaseIntention @relation(fields: [purchaseIntentionId], references: [id])
  sampling          Sampling          @relation(fields: [samplingId], references: [id], onDelete: Cascade)

  @@id([purchaseIntentionId, samplingId])
  @@map("purchase_intention_sampling")
}

model ConsumptionMomentSampling {
  consumptionMomentId String
  samplingId          String

  consumptionMoment ConsumptionMoment @relation(fields: [consumptionMomentId], references: [id])
  sampling          Sampling          @relation(fields: [samplingId], references: [id], onDelete: Cascade)

  @@id([consumptionMomentId, samplingId])
  @@map("consumption_moment_sampling")
}

model Sampling {
  id               String  @id @default(cuid())
  submissionId     String  @unique @map("submission_id")
  trafficId        String  @map("traffic_id")
  ethnicityId      String  @map("ethnicity_id")
  ageRangeId       String  @map("age_range_id")
  genderId         String  @map("gender_id")
  netPromoterScore Int?    @map("net_promoter_score")
  followUp         Boolean @default(false) @map("follow_up")
  clientComments   String? @map("client_comments")
  promotorComments String? @map("promotor_comments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  submission         FormSubmission              @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  traffic            SamplingTraffic             @relation(fields: [trafficId], references: [id])
  ethnicity          Ethnicity                   @relation(fields: [ethnicityId], references: [id])
  ageRange           AgeRange                    @relation(fields: [ageRangeId], references: [id])
  gender             Gender                      @relation(fields: [genderId], references: [id])
  purchaseIntentions PurchaseIntentionSampling[]
  consumptionMoments ConsumptionMomentSampling[]

  @@map("sampling")
}

model PhotoType {
  id          String @id @default(cuid())
  slug        String @unique
  description String

  photos Photo[]

  @@map("photo_types")
}

model Photo {
  id           String         @id @default(cuid())
  url          String
  typeId       String
  submissionId String
  // Relations
  type         PhotoType      @relation(fields: [typeId], references: [id])
  submission   FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("photos")
}

model SyncLog {
  id          String     @id @default(cuid())
  dashboardId String
  status      SyncStatus
  error       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  dashboard Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  @@map("sync_logs")
}

model ServiceRefreshTokenLog {
  id             String     @id @default(cuid())
  serviceTokenId String
  status         SyncStatus
  error          Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  serviceToken ServiceToken @relation(fields: [serviceTokenId], references: [id], onDelete: Cascade)

  @@map("service_refresh_token_logs")
}

model SyncJob {
  id          String        @id @default(cuid())
  dashboardId String        @map("dashboard_id")
  batchId     String        @map("batch_id")
  rowIndex    Int           @map("row_index")
  status      SyncJobStatus @default(PENDING)
  result      Json?
  error       String?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  data        Json
  dashboard   Dashboard     @relation(fields: [dashboardId], references: [id])

  @@unique([batchId, rowIndex])
  @@index([dashboardId])
  @@index([status])
  @@index([batchId])
}

enum Role {
  CLIENT
  SUPER_ADMIN
}

enum QuestionGroupType {
  BASIC
  MATRIX
}

enum QuestionType {
  CHECKBOX
  SELECT
  MULTISELECT
  DATE
  NUMERIC
  TEXT
  PHOTO
}

enum SyncStatus {
  SUCCESS
  ERROR
}

enum SyncJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
